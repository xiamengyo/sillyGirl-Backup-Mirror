name: Backup Releases

on:
  repository_dispatch:
    types: [backup_releases]

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Get releases list
      id: get_releases
      run: |
        # 获取所有releases（按创建时间升序，最旧的在前）
        releases=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
          "https://api.github.com/repos/callacat/sillyGirl-Backup/releases?per_page=100&direction=asc" | \
          jq -r '.[] | "\(.id)|\(.tag_name)|\(.published_at)"')
        
        # 保存到文件供后续步骤使用
        echo "$releases" > releases_list.txt
        
        # 计算总release数量
        total=$(echo "$releases" | wc -l)
        echo "total_releases=$total" >> $GITHUB_ENV

    - name: Cleanup previous incorrect backups
      id: cleanup_backups
      run: |
        echo "Checking for incorrectly named backup files..."
        
        # 获取当前仓库的所有releases
        my_releases=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100")
        
        # 查找文件名仅为数字的assets
        echo "$my_releases" | jq -r '.[] | "\(.id)|\(.tag_name)"' | while IFS='|' read -r release_id tag_name; do
          assets=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets" | \
            jq -r '.[] | "\(.id)|\(.name)"')
          
          for asset in $assets; do
            IFS='|' read -r asset_id asset_name <<< "$asset"
            # 检查文件名是否仅为数字
            if [[ "$asset_name" =~ ^[0-9]+$ ]]; then
              echo "Deleting incorrectly named asset: $asset_name (ID: $asset_id) from release: $tag_name"
              
              # 删除错误命名的asset
              curl -s -X DELETE \
                -H "Authorization: token ${{ secrets.PAT }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
            fi
          done
        done

    - name: Determine batch range
      id: determine_batch
      run: |
        # 读取上次备份进度
        if [ -f "backup_progress.txt" ]; then
          last_processed=$(cat backup_progress.txt)
          echo "Last processed index: $last_processed"
        else
          last_processed=0
          echo "Starting from beginning"
        fi
        
        # 计算本次处理的起始和结束索引
        start_index=$last_processed
        end_index=$((start_index + 5))  # 每次处理5个
        
        # 确保不超过总数
        if [ $end_index -gt $total ]; then
          end_index=$total
        fi
        
        echo "start_index=$start_index" >> $GITHUB_ENV
        echo "end_index=$end_index" >> $GITHUB_ENV
        echo "Processing releases from $start_index to $end_index"

    - name: Process batch of releases
      id: process_batch
      run: |
        # 读取releases列表
        mapfile -t releases < releases_list.txt
        
        # 处理当前批次的releases
        for i in $(seq $start_index $(($end_index - 1))); do
          if [ $i -ge ${#releases[@]} ]; then
            break
          fi
          
          IFS='|' read -r release_id tag_name published_at <<< "${releases[$i]}"
          echo "Processing release $release_id: $tag_name"
          
          # 获取release详情
          release_info=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/repos/callacat/sillyGirl-Backup/releases/$release_id")
          
          # 创建本地tag
          git tag "$tag_name" || echo "Tag may already exist"
          
          # 创建release
          release_name=$(echo "$release_info" | jq -r '.name')
          release_body=$(echo "$release_info" | jq -r '.body')
          
          # 检查是否已存在同名release
          existing_release=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag_name" | jq -r '.id')
          
          if [ "$existing_release" != "null" ]; then
            echo "Release $tag_name already exists, updating..."
            # 更新现有release
            response=$(curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Content-Type: application/json" \
              -d "{\"name\": \"$release_name\", \"body\": \"$release_body\"}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$existing_release")
          else
            # 创建新release
            response=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\": \"$tag_name\", \"name\": \"$release_name\", \"body\": \"$release_body\"}" \
              "https://api.github.com/repos/${{ github.repository }}/releases")
          fi
          
          upload_url=$(echo "$response" | jq -r '.upload_url' | sed 's/{.*}//')
          
          # 获取assets信息（包括名称和下载URL）
          assets=$(echo "$release_info" | jq -r '.assets[] | "\(.name)|\(.url)|\(.id)"')
          for asset in $assets; do
            IFS='|' read -r asset_name asset_url asset_orig_id <<< "$asset"
            echo "Downloading asset: $asset_name"
            
            # 下载asset，使用原始文件名
            curl -s -L -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/octet-stream" \
              "$asset_url" -o "$asset_name"
            
            # 验证文件完整性
            if [ -f "$asset_name" ]; then
              # 计算下载文件的SHA256哈希值
              downloaded_hash=$(sha256sum "$asset_name" | awk '{print $1}')
              echo "Downloaded file hash: $downloaded_hash"
              
              # 尝试从原始release获取哈希值
              # 首先检查是否有专门的checksum文件
              checksum_asset=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("(?i)checksum|sha256|sha1|md5")) | "\(.name)|\(.url)"' | head -n1)
              
              if [ -n "$checksum_asset" ]; then
                IFS='|' read -r checksum_name checksum_url <<< "$checksum_asset"
                echo "Found checksum file: $checksum_name"
                
                # 下载checksum文件
                curl -s -L -H "Authorization: token ${{ secrets.PAT }}" \
                  -H "Accept: application/octet-stream" \
                  "$checksum_url" -o "checksum_temp.txt"
                
                # 在checksum文件中查找当前文件的哈希值
                expected_hash=$(grep -i "$asset_name" "checksum_temp.txt" | grep -oE '[a-f0-9]{64}' | head -n1)
                rm -f "checksum_temp.txt"
                
                if [ -n "$expected_hash" ]; then
                  echo "Expected hash from checksum file: $expected_hash"
                  if [ "$downloaded_hash" != "$expected_hash" ]; then
                    echo "ERROR: Hash mismatch for $asset_name"
                    echo "Expected: $expected_hash"
                    echo "Got: $downloaded_hash"
                    # 可以选择退出或继续处理其他文件
                    # exit 1
                  else
                    echo "Hash verification passed for $asset_name"
                  fi
                else
                  echo "No hash found for $asset_name in checksum file"
                fi
              else
                echo "No checksum file found, skipping hash verification"
              fi
              
              # 上传asset，使用原始文件名
              echo "Uploading asset: $asset_name"
              upload_response=$(curl -s -w "%{http_code}" -X POST \
                -H "Authorization: token ${{ secrets.PAT }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$asset_name" \
                "$upload_url?name=$asset_name")
              
              # 检查上传状态
              http_code=${upload_response: -3}
              if [ "$http_code" -ne 201 ]; then
                echo "ERROR: Failed to upload $asset_name (HTTP $http_code)"
                echo "Response: ${upload_response%???}"
              else
                echo "Successfully uploaded $asset_name"
              fi
              
              # 清理临时文件
              rm -f "$asset_name"
            fi
          done
          
          # 记录进度
          echo "$release_id" > last_backup.txt
        done
        
        # 更新进度
        echo "$end_index" > backup_progress.txt

    - name: Commit and push progress
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add last_backup.txt backup_progress.txt
        git commit -m "Update backup progress" || echo "No changes to commit"
        # 使用PAT进行推送
        git push https://xiamengyo:${{ secrets.PAT }}@github.com/xiamengyo/sillyGirl-Backup-Mirror.git HEAD:main